#!/usr/bin/python2
# -*- coding: utf-8 -*-

####################################################
#
# Generate scrambled fonts.
#
# This is a very basic script to generate scrambled
# fonts. 
#
# Copyright (c) by Tamas Jursonovics
# http://jursonovics.com
#
# prerequisites: fontforge, python-fontforge
#
####################################################

import imp
try:
  imp.find_module('fontforge')
except ImportError:
  print("This scrypt requires fontforge's python library, please install python-fontforge!")
  exit(1)


import fontforge
import string
import random
import sys
import os.path
import argparse


parser = argparse.ArgumentParser(description='Font scrambler. Creates a scrambled TrueType font and a scrambler table for text encoding.')
parser.add_argument('-i',type=argparse.FileType('r'),help='Input TrueType font file.',metavar='FONTFILE',required=True)
parser.add_argument('--shake',type=float,default=0,help='Randomly move the points of every glyph by FACTOR (float, typical value is 0.02) to avoid hash attack.',metavar='FACTOR')
parser.add_argument('--multiglyph',action='store_true',default=False,help='Assigne multiple glyphs to one character to avoid the frequency analysis attack.')
parser.add_argument('--components',action='store_true',default=False,help='Change the number of points in every glyph to prevent prediction by components.')
parser.add_argument('--no-scramble',action='store_true',default=False,help='Do not scramble (swap) the glyphs. Only for testing purposes, allows testing individual features.')
parser.add_argument('--seed',type=int,help='Set the random seed to SEED (integer). Only for testing purposes, allows recreating the scrambler table and stores the random seed in the filename.')
args = parser.parse_args()


if args.seed is not None:               #for demo purposes only: allow recreation of scrambler table
  variant=str(args.seed)
  random.seed(variant)
else:
  random.seed()
  variant=str(random.randrange(1000000000,9999999999))


bfont=fontforge.open(args.i.name)       #open a non-scrambled, source font
nfont=fontforge.font()                  #create a place holder for the new, modified font
if not args.no_scramble:
  tbl=open(bfont.familyname + "-" + str(args.shake) + "-" + variant + ".txt", 'w') #create the scrambler table

if args.multiglyph:
  displaychar=u'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.'
  codechar=   u'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǄǅǆǇǈǉǊǋǌǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȜȝȞȟȠȡȢȣȤȥȦȧȨȩȪȫȬȭȮȯȰȱȲȳȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʔʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁ˂˃˄˅ˆˇˈˉˊˋˌˍˎˏːˑ˒˓˔˕˖˗˘˙˚˛˜˝˞˟ˠˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷'
else:
  displaychar=u'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.'
  codechar=   u'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.'

ascii=list(displaychar)
scrtbl=list(codechar)            
print(ascii)
if not args.no_scramble:                #scramble the glyphs
  random.shuffle(scrtbl)                   
print(scrtbl)


nfont.importLookups(bfont,bfont.gpos_lookups) #Copy GPOS Lookups before copying glyphs


for b, n in zip(ascii, scrtbl):         #copy the glyphs (only in displaychar).
  bfont.selection.select(('unicode',), ord(b))
  bfont.copy()
  nfont.createChar(ord(n))
  nfont.selection.select(('unicode',), ord(n))
  nfont.paste()


if args.shake is not None:              #shake font
  for g in nfont.glyphs():              #loop over all glyphs

    for i in range(0, g.layer_cnt):     #loop over all layers
      
      g.activeLayer=i
      l=g.layers[g.activeLayer]

      for c in l:                       #loop over all contours
        for p in c:                     #loop over all points
          p.x=p.x + g.width  * random.uniform(-args.shake,args.shake)  #move points by FACTOR
          p.y=p.y + g.vwidth * random.uniform(-args.shake,args.shake)
  
      l.removeOverlap()                 #overlap may occurs after moving points randomly
      g.layers[g.activeLayer] = l       #save layer
	
    if args.components:
	  g.simplify()                  #reduce the number of points in the glyph

if not args.no_scramble:
  buff = ''.join(ascii)+ "\n"
  tbl.write(buff.encode('UTF-8'))      #write scrambler table
  buff = ''.join(scrtbl)+ "\n"
  tbl.write(buff.encode('UTF-8'))


nfont.fontname=bfont.fontname           #copy or set properties
nfont.gasp=bfont.gasp
nfont.familyname=bfont.familyname
nfont.version=variant
nfont.copyright=bfont.copyright
nfont.ascent=bfont.ascent
nfont.descent=bfont.descent
nfont.em=bfont.em
nfont.upos=bfont.upos
nfont.uwidth=bfont.uwidth
nfont.weight=bfont.weight
nfont.comment="Scrambled font created by FontScrambler, please see the scrambler table to encode text"


nfont.generate(bfont.familyname + "-" + str(args.shake) + "-" + variant + ".ttf")   #save scrambled font
bfont.close()
nfont.close()
if not args.no_scramble:
  tbl.close()

