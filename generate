#!/usr/bin/python2


####################################################
#
# Generate scrambled fonts.
#
# This is a very basic script to generate scrambled
# fonts. 
#
# Copyright (c) by Tamas Jursonovics
# http://jursonovics.com
#
# prerequisites: fontforge, python-fontforge
#
####################################################

import imp
try:
  imp.find_module('fontforge')
except ImportError:
  print("This scrypt requires fontforge's python library, please install python-fontforge!")
  exit(1)


import fontforge
import string
import random
import sys
import os.path
import argparse


parser = argparse.ArgumentParser(description='Font scrambler.')
parser.add_argument('-i',type=argparse.FileType('r'),help='Input font file.',required=True)
parser.add_argument('--seed',type=int,help='Set the random seed to SEED (integer). Only for testing purposes, allows recreation of the random table and stores the random seed in the filename.')
parser.add_argument('--shake',type=float,help='Randomly move the points of glyphs by FACTOR (float, typical value is 0.02) to avoid hash attack.',metavar='FACTOR')
parser.add_argument('--multiglyph',action='store_true',help='Assignes multiple glyphs to one character to avoid the frequency analysis attack. Currently under development')
args = parser.parse_args()


if args.seed is not None:               #for demo purposes only: allow recreation of scrambler table
  variant=str(args.seed)
  random.seed(variant)
else:
  variant=str(random.randrange(1000000000,9999999999))
  random.seed()


bfont=fontforge.open(args.i.name)       #open a non-scrambled, source font
nfont=fontforge.font()                  #create a placeholder for the scrambled font
tbl=open(bfont.familyname + "_" + variant + ".txt", 'w') #create the scrambler table


displaychar="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ."
ascii=list(displaychar)                 #create scrambling table
scrmx=list(displaychar)            
random.shuffle(scrmx)                   #scramble the letters


nfont.importLookups(bfont,bfont.gpos_lookups) #Copy GPOS Lookups before copying glyphs


for b, n in zip(ascii, scrmx):          #scramble the font
  bfont.selection.select(b)
  bfont.copy()
  nfont.selection.select(n)
  nfont.paste()


if args.shake is not None:              #shake font
  for g in nfont.glyphs():              #loop over all glyphs

      for i in range(0, g.layer_cnt):   #loop over all layers
      
        g.activeLayer=i
        l=g.layers[g.activeLayer]

        for c in l:                     #loop over all contours

          for p in c:                   #loop over all points

            p.x=p.x + g.width  * random.uniform(-args.shake,args.shake)  #move points by RATIO
            p.y=p.y + g.vwidth * random.uniform(-args.shake,args.shake)
  
        l.removeOverlap()               #overlap may occurs after moving points randomly
        g.layers[g.activeLayer] = l     #save layer


tbl.write(''.join(ascii) + "\n")        #write scrambler table
tbl.write(''.join(scrmx))


nfont.fontname=bfont.fontname           #copy and set properties
nfont.gasp=bfont.gasp
nfont.familyname=bfont.familyname
nfont.version=variant
nfont.copyright=bfont.copyright
nfont.ascent=bfont.ascent
nfont.descent=bfont.descent
nfont.em=bfont.em
nfont.upos=bfont.upos
nfont.uwidth=bfont.uwidth
nfont.weight=bfont.weight
nfont.comment="Scrambled font created by FontScrambler, please see the scrambling table to encode text"


nfont.generate(bfont.familyname + "_" + variant + ".ttf")   #save scrambled font
bfont.close()
nfont.close()
tbl.close()

